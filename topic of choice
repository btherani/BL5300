library(dada2)
library(DESeq2)
library(tidyverse)
library(phyloseq)

path <- "~/data/Caspian/Caspian_Water"
list.files(path)

fnFs_Water <- sort(list.files(path, pattern="_R1_001.fastq", full.names = TRUE))

path2 <- "~/data/Caspian/Caspian_Sediment"
list.files(path2)

fnFs_Sediment <- sort(list.files(path2, full.names = TRUE))

list(fnFs_Water)
list(fnFs_Sediment)

names_water <- sapply(strsplit(basename(fnFs_Water), "_"), `[`, 1)
names_sediment <- sapply(strsplit(basename(fnFs_Sediment), "_"), `[`, 1)


plotQualityProfile(fnFs_Water[1:2])
plotQualityProfile(fnFs_Sediment[1:2])

filtFs_water <- file.path(path, "filtered", paste0(names_water, "_F_filt.fastq.gz"))
filtFs_sediment <- file.path(path2, "filtered", paste0(names_sediment, "_F_filt.fastq.gz"))

names(filtFs_water) <- names_water
names(filtFs_sediment) <- names_sediment

out_water <- filterAndTrim(fnFs_Water, filtFs_water, truncLen=c(160),
                     maxN=0, maxEE=c(2), truncQ=2, rm.phix=TRUE,
                     compress=TRUE,multithread = TRUE)

out_sediment <- filterAndTrim(fnFs_Sediment, filtFs_sediment, truncLen=c(160),
                           maxN=0, maxEE=c(2), truncQ=2, rm.phix=TRUE,
                           compress=TRUE,multithread = TRUE)


errF_water <- learnErrors(filtFs_water, multithread=TRUE)

#112849120 total bases in 705307 reads from 6 samples will be used for learning the error rates.

errF_sediment <- learnErrors(filtFs_sediment, multithread=TRUE)

plotErrors(errF_water, nominalQ=TRUE)
plotErrors(errF_sediment, nominalQ=TRUE)

dadaFs_water <- dada(filtFs_water, err=errF_water, multithread=TRUE)
dadaFs_sediment <- dada(filtFs_sediment, err=errF_sediment, multithread=TRUE)

dadaFs_water[[1]]
dadaFs_sediment[[1]]

metadata <- read_tsv("Caspian_Metadata.txt")
rownames(metadata)<-metadata$File_name

seqtab_sediment <- makeSequenceTable(dadaFs_sediment)
dim(seqtab_sediment)

seqtab_water <- makeSequenceTable(dadaFs_water)
dim(seqtab_water)

seqtab.nochim_sediment <- removeBimeraDenovo(seqtab_sediment, method="consensus", verbose=TRUE, multithread=TRUE)
dim(seqtab.nochim_sediment)

sum(seqtab.nochim_sediment)/sum(seqtab_sediment)

seqtab.nochim_water <- removeBimeraDenovo(seqtab_water, method="consensus", verbose=TRUE, multithread=TRUE)
dim(seqtab.nochim_water)

sum(seqtab.nochim_water)/sum(seqtab_water)

saveRDS(seqtab.nochim_sediment, "sediment_seqtab.rds")
saveRDS(seqtab.nochim_water, "sediment_seqtab.rds")
## Merge non-chimera checked tables and check chimeras for full table.
combined<-mergeSequenceTables(table1=seqtab_sediment,table2=seqtab_water)
seqtab.nochim_water <- removeBimeraDenovo(combined, method="consensus", verbose=TRUE, multithread=TRUE)

saveRDS(combined,"combined_table.rds")
combined<-readRDS("combined_table.rds")

taxa_combined<-assignTaxonomy(combined, "silva_nr_v132_train_set.fa.gz", multithread=TRUE)

seqtab.nochim_water=readRDS("sediment_seqtab.rds")

taxa_water<-assignTaxonomy(seqtab.nochim_water, "silva_nr_v132_train_set.fa.gz", multithread=TRUE)
taxa_sediment<-assignTaxonomy(seqtab.nochim_sediment, "silva_nr_v132_train_set.fa.gz", multithread=TRUE)


myfulldata <- mergeSequenceTables(table1=seqtab.nochim_water, table2=seqtab.nochim_sediment)

saveRDS(myfulldata, file="mydata.rds")

myfulldata<-readRDS("mydata.rds") 

taxa <- assignTaxonomy(myfulldata, "taxonomy/silva_nr_v132_train_set.fa.gz", multithread=TRUE)

taxa <- addSpecies(taxa, "silva_species_assignment_v132.fa.gz", multithread=TRUE)
taxa.print <- taxa
rownames(taxa.print) <- NULL
head(taxa.print)

combined2<-readRDS("combined_table2.rds")
taxa<-readRDS("taxa_combined.rds")
taxa <- addSpecies(taxa, "silva_species_assignment_v132.fa.gz")
saveRDS(taxa,"taxa_species.rds")

taxa_species<-readRDS("taxa_species.rds")

ps <- phyloseq(otu_table(combined, taxa_are_rows=FALSE), 
               sample_data(metadata), 
               tax_table(taxa))

dna <- Biostrings::DNAStringSet(taxa_names(ps))
names(dna) <- taxa_names(ps)
ps <- merge_phyloseq(ps, dna)
taxa_names(ps) <- paste0("ASV", seq(ntaxa(ps)))
ps

p=plot_richness(ps, x="Type", measures=c("Observed", "Simpson"), color="Type")
p+geom_boxplot()


ps.prop <- transform_sample_counts(ps, function(otu) otu/sum(otu))
ord.pcoa.bray <- ordinate(ps.prop, method="PCoA", distance="bray")
plot_ordination(ps.prop, ord.pcoa.bray, color="Type", title="Bray PCoA")


top20 <- names(sort(taxa_sums(ps), decreasing=TRUE))[1:20]
ps.top20 <- transform_sample_counts(ps, function(OTU) OTU/sum(OTU))
ps.top20 <- prune_taxa(top20, ps.top20)
plot_bar(ps.top20, x="SampleID", fill="Family") + facet_wrap(~Type, scales="free_x")



classabundance <- ps %>%
  tax_glom(taxrank = "Class") %>%                     # agglomerate at class level
  transform_sample_counts(function(x) {x/sum(x)} ) %>% # Transform to rel. abundance
  psmelt() %>%                                         # Melt to long format
  arrange(Class) 
head(classabundance)

##Filter out low abundance classes

class <- classabundance %>%
  select(Class, SampleID, Type, Abundance) %>%
  group_by(Class, SampleID, Type) %>%
  filter(Abundance > 0.05)
head(class)

## Create a category that groups all taxa less than 5% of the community into a category of other
other<-classabundance %>%
  select(Class, SampleID, Type, Abundance) %>%
  group_by(Class, SampleID, Type) %>%
  filter(Abundance < 0.05 & Abundance>0)

other2<-other%>%
  group_by(SampleID)%>%
  summarise(Abundance = sum(Abundance))%>%
  mutate(Class="Other")%>%
  inner_join(metadata,by="SampleID")%>%
  select(Class, SampleID, Type, Abundance)
full<-bind_rows(class, other2)


#Load a manual color scheme
Color_22_Palette <- c("darkgray", "blue", "aquamarine", "deepskyblue", "chocolate", "navy", "green","gold","hotpink3","orangered","magenta","orange","black","cyan","seagreen","royalblue","red","purple","black","tan1","orangered","orange","blue")


#Make the plot
ggplot(full, aes(x=SampleID, y=Abundance, fill= Class))+
  geom_bar(stat="identity",position="stack",color="black")+
  scale_fill_manual(values = Color_22_Palette)+
  theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))+
  theme(legend.position = "bottom")+
  theme(legend.text=element_text(size=15))
